pipeline {
   agent any

    stages {
        stage('Sonar Analysis') {
            steps {
                echo 'Testing..'
                sh 'cd api && sudo docker run  --rm -e SONAR_HOST_URL="http://65.0.97.198:9000" -e SONAR_LOGIN="sqp_e54760bfc988207ec69e5dd2e8c9fa007151e357"  -v ".:/usr/src" sonarsource/sonar-scanner-cli -Dsonar.projectKey=lms'
            }
        }

        stage('Build LMS') {
            steps {
                echo 'Building..'
                sh 'cd api && npm install && npm run build'
            }
        }

        stage('Release LMS') {
            steps {
                script {
                    echo "Releasing.."       
                    def packageJSON = readJSON file: 'api/package.json'
                    def packageJSONVersion = packageJSON.version
                    echo "${packageJSONVersion}"  
                    sh "zip api/build-${packageJSONVersion}.zip -r api/build"
                    sh "curl -v -u admin:amkamk3@ --upload-file api/build-${packageJSONVersion}.zip http://65.1.132.50:8081/repository/lmsbe/"     
            }
            }
        }
      stage('Docker Build') {	
        steps {
            sh 'cd api && docker build -t muralialakuntla3/api .'
              }
        }
        stage('Docker run container') {	
          steps {
             sh 'docker container rm -f api' 
             sh 'docker container run -dt --name api -p 3000:3000 muralialakuntla3/api'
        }
        }
   
        stage('Remove old docker images') {
             steps {
                 sh 'docker rmi -f muralialakuntla3/api'
            }
        }
         stage('creating database container') {
             steps {
//                 sh 'docker network create -d bridge lms-appnetwork'
                 sh 'docker container rm --force lmsdb'
                 sh 'docker run -d -p 5432:5432 --network lms-appnetwork -e  POSTGRES_PASSWORD=password --name lmsdb postgres'
            }
        }
         stage('Running the docker container') {
            steps {
                  sh 'docker container rm --force api'
                  sh 'docker run -d -p 3000:3000 --network lms-appnetwork -e DATABASE_URL=postgresql://postgres:password@lmsdb:5432/postgres --name api -e PORT=3000 -e MODE=local  muralialakuntla3/api'
            }
        }
    }
}
